{"version":3,"file":"loader.min.js","sources":["../src/loader.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @module     filter_biblelinks/loader\n * @copyright  2022 Kaleb Heitzman <kaleb@jamfire.io>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * Translation Editor UI\n */\nexport const init = () => {\n\n    /**\n     * Get text from processing areas and add them to contenteditables\n     */\n    window.addEventListener(\"load\", () => {\n        let passages = document.querySelectorAll(\n            \".filter-biblelinks__bible-passage\"\n        );\n\n        passages.forEach(item => {\n            let version = item.getAttribute('data-version');\n            let element = item.querySelector('.passagetext');\n\n            // Create a new XMLHttpRequest object\n            let xhr = new XMLHttpRequest();\n\n            // Configure the request as a GET request\n            xhr.open(\"GET\", \"/filter/biblelinks/api.php?passage=\"\n                + item.dataset.passage + \"&version=\"\n                + item.dataset.version, true);\n\n            // Set up a function to handle the response\n            xhr.onload = function () {\n                if (xhr.status >= 200 && xhr.status < 300) {\n                    // Request was successful, handle the response\n                    let response = JSON.parse(xhr.responseText);\n                    element.innerHTML = \"\";\n                    response.data[version].forEach(passage => {\n                        element.innerHTML += '<h5>' + passage.passage + '</h5>';\n                        element.innerHTML += passage.text;\n                    });\n                } else {\n                    // Request failed, handle the error\n                    // console.error(\"Request failed with status:\", xhr.status);\n                }\n            };\n\n            // Set up a function to handle errors\n            xhr.onerror = function () {\n                // Request failed, handle the error\n                // console.error(\"Request failed\");\n            };\n\n            // Send the request\n            xhr.send();\n        });\n\n    });\n\n};"],"names":["window","addEventListener","document","querySelectorAll","forEach","item","version","getAttribute","element","querySelector","xhr","XMLHttpRequest","open","dataset","passage","onload","status","response","JSON","parse","responseText","innerHTML","data","text","onerror","send"],"mappings":"6JAwBoB,KAKhBA,OAAOC,iBAAiB,QAAQ,KACbC,SAASC,iBACpB,qCAGKC,SAAQC,WACTC,QAAUD,KAAKE,aAAa,gBAC5BC,QAAUH,KAAKI,cAAc,gBAG7BC,IAAM,IAAIC,eAGdD,IAAIE,KAAK,MAAO,sCACVP,KAAKQ,QAAQC,QAAU,YACvBT,KAAKQ,QAAQP,SAAS,GAG5BI,IAAIK,OAAS,cACLL,IAAIM,QAAU,KAAON,IAAIM,OAAS,IAAK,KAEnCC,SAAWC,KAAKC,MAAMT,IAAIU,cAC9BZ,QAAQa,UAAY,GACpBJ,SAASK,KAAKhB,SAASF,SAAQU,UAC3BN,QAAQa,WAAa,OAASP,QAAQA,QAAU,QAChDN,QAAQa,WAAaP,QAAQS,UASzCb,IAAIc,QAAU,aAMdd,IAAIe"}